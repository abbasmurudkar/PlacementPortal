{"ast":null,"code":"import { MixedType, schemaSpecKey } from './MixedType';\nimport { createValidator, createValidatorAsync, checkRequired, isEmpty, formatErrorMessage } from './utils';\nexport class ObjectType extends MixedType {\n  constructor(errorMessage) {\n    super('object');\n    super.pushRule({\n      onValid: v => typeof v === 'object',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n  check() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n    let data = arguments.length > 1 ? arguments[1] : undefined;\n    let fieldName = arguments.length > 2 ? arguments[2] : undefined;\n    const check = (value, data, type, childFieldKey) => {\n      var _a;\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage(type.requiredMessage || ((_a = type.locale) === null || _a === void 0 ? void 0 : _a.isRequired), {\n            name: type.fieldLabel || childFieldKey || fieldName\n          })\n        };\n      }\n      if (type[schemaSpecKey] && typeof value === 'object') {\n        const checkResultObject = {};\n        let hasError = false;\n        Object.entries(type[schemaSpecKey]).forEach(_ref => {\n          let [k, v] = _ref;\n          const checkResult = check(value[k], value, v, k);\n          if (checkResult === null || checkResult === void 0 ? void 0 : checkResult.hasError) {\n            hasError = true;\n          }\n          checkResultObject[k] = checkResult;\n        });\n        return {\n          hasError,\n          object: checkResultObject\n        };\n      }\n      const validator = createValidator(data, childFieldKey || fieldName, type.fieldLabel);\n      const checkStatus = validator(value, type.priorityRules);\n      if (checkStatus) {\n        return checkStatus;\n      }\n      if (!type.required && isEmpty(value)) {\n        return {\n          hasError: false\n        };\n      }\n      return validator(value, type.rules) || {\n        hasError: false\n      };\n    };\n    return check(value, data, this);\n  }\n  checkAsync() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;\n    let data = arguments.length > 1 ? arguments[1] : undefined;\n    let fieldName = arguments.length > 2 ? arguments[2] : undefined;\n    const check = (value, data, type, childFieldKey) => {\n      var _a;\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return Promise.resolve({\n          hasError: true,\n          errorMessage: formatErrorMessage(type.requiredMessage || ((_a = type.locale) === null || _a === void 0 ? void 0 : _a.isRequired), {\n            name: type.fieldLabel || childFieldKey || fieldName\n          })\n        });\n      }\n      const validator = createValidatorAsync(data, childFieldKey || fieldName, type.fieldLabel);\n      return new Promise(resolve => {\n        if (type[schemaSpecKey] && typeof value === 'object') {\n          const checkResult = {};\n          const checkAll = [];\n          const keys = [];\n          Object.entries(type[schemaSpecKey]).forEach(_ref2 => {\n            let [k, v] = _ref2;\n            checkAll.push(check(value[k], value, v, k));\n            keys.push(k);\n          });\n          return Promise.all(checkAll).then(values => {\n            let hasError = false;\n            values.forEach((v, index) => {\n              if (v === null || v === void 0 ? void 0 : v.hasError) {\n                hasError = true;\n              }\n              checkResult[keys[index]] = v;\n            });\n            resolve({\n              hasError,\n              object: checkResult\n            });\n          });\n        }\n        return validator(value, type.priorityRules).then(checkStatus => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n        }).then(() => {\n          if (!type.required && isEmpty(value)) {\n            resolve({\n              hasError: false\n            });\n          }\n        }).then(() => validator(value, type.rules)).then(checkStatus => {\n          if (checkStatus) {\n            resolve(checkStatus);\n          }\n          resolve({\n            hasError: false\n          });\n        });\n      });\n    };\n    return check(value, data, this);\n  }\n  /**\n   * @example\n   * ObjectType().shape({\n   *  name: StringType(),\n   *  age: NumberType()\n   * })\n   */\n  shape(fields) {\n    this[schemaSpecKey] = fields;\n    return this;\n  }\n}\nexport default function getObjectType(errorMessage) {\n  return new ObjectType(errorMessage);\n}","map":{"version":3,"names":["MixedType","schemaSpecKey","createValidator","createValidatorAsync","checkRequired","isEmpty","formatErrorMessage","ObjectType","constructor","errorMessage","pushRule","onValid","v","locale","type","check","value","arguments","length","undefined","data","fieldName","childFieldKey","required","trim","emptyAllowed","hasError","requiredMessage","_a","isRequired","name","fieldLabel","checkResultObject","Object","entries","forEach","_ref","k","checkResult","object","validator","checkStatus","priorityRules","rules","checkAsync","Promise","resolve","checkAll","keys","_ref2","push","all","then","values","index","shape","fields","getObjectType"],"sources":["/Users/mohdmurudkar/Desktop/Capstone/client/node_modules/schema-typed/src/ObjectType.ts"],"sourcesContent":["import { MixedType, schemaSpecKey } from './MixedType';\nimport {\n  createValidator,\n  createValidatorAsync,\n  checkRequired,\n  isEmpty,\n  formatErrorMessage\n} from './utils';\nimport { PlainObject, SchemaDeclaration, CheckResult, ErrorMessageType } from './types';\nimport { ObjectTypeLocale } from './locales';\n\nexport class ObjectType<DataType = any, E = ErrorMessageType> extends MixedType<\n  PlainObject,\n  DataType,\n  E,\n  ObjectTypeLocale\n> {\n  [schemaSpecKey]: SchemaDeclaration<DataType, E>;\n  constructor(errorMessage?: E | string) {\n    super('object');\n    super.pushRule({\n      onValid: v => typeof v === 'object',\n      errorMessage: errorMessage || this.locale.type\n    });\n  }\n\n  check(value: PlainObject = this.value, data?: DataType, fieldName?: string | string[]) {\n    const check = (value: any, data: any, type: any, childFieldKey?: string) => {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return {\n          hasError: true,\n          errorMessage: formatErrorMessage<E>(type.requiredMessage || type.locale?.isRequired, {\n            name: type.fieldLabel || childFieldKey || fieldName\n          })\n        };\n      }\n\n      if (type[schemaSpecKey] && typeof value === 'object') {\n        const checkResultObject: any = {};\n        let hasError = false;\n        Object.entries(type[schemaSpecKey]).forEach(([k, v]) => {\n          const checkResult = check(value[k], value, v, k);\n          if (checkResult?.hasError) {\n            hasError = true;\n          }\n          checkResultObject[k] = checkResult;\n        });\n\n        return { hasError, object: checkResultObject };\n      }\n\n      const validator = createValidator<PlainObject, DataType, E | string>(\n        data,\n        childFieldKey || fieldName,\n        type.fieldLabel\n      );\n      const checkStatus = validator(value, type.priorityRules);\n\n      if (checkStatus) {\n        return checkStatus;\n      }\n\n      if (!type.required && isEmpty(value)) {\n        return { hasError: false };\n      }\n\n      return validator(value, type.rules) || { hasError: false };\n    };\n\n    return check(value, data, this) as CheckResult<E | string, DataType>;\n  }\n\n  checkAsync(value: PlainObject = this.value, data?: DataType, fieldName?: string | string[]) {\n    const check = (value: any, data: any, type: any, childFieldKey?: string) => {\n      if (type.required && !checkRequired(value, type.trim, type.emptyAllowed)) {\n        return Promise.resolve({\n          hasError: true,\n          errorMessage: formatErrorMessage<E>(type.requiredMessage || type.locale?.isRequired, {\n            name: type.fieldLabel || childFieldKey || fieldName\n          })\n        });\n      }\n\n      const validator = createValidatorAsync<PlainObject, DataType, E | string>(\n        data,\n        childFieldKey || fieldName,\n        type.fieldLabel\n      );\n\n      return new Promise(resolve => {\n        if (type[schemaSpecKey] && typeof value === 'object') {\n          const checkResult: any = {};\n          const checkAll: Promise<unknown>[] = [];\n          const keys: string[] = [];\n          Object.entries(type[schemaSpecKey]).forEach(([k, v]) => {\n            checkAll.push(check(value[k], value, v, k));\n            keys.push(k);\n          });\n\n          return Promise.all(checkAll).then(values => {\n            let hasError = false;\n            values.forEach((v: any, index: number) => {\n              if (v?.hasError) {\n                hasError = true;\n              }\n              checkResult[keys[index]] = v;\n            });\n\n            resolve({ hasError, object: checkResult });\n          });\n        }\n\n        return validator(value, type.priorityRules)\n          .then((checkStatus: CheckResult<E | string, DataType> | void | null) => {\n            if (checkStatus) {\n              resolve(checkStatus);\n            }\n          })\n          .then(() => {\n            if (!type.required && isEmpty(value)) {\n              resolve({ hasError: false });\n            }\n          })\n          .then(() => validator(value, type.rules))\n          .then((checkStatus: CheckResult<E | string, DataType> | void | null) => {\n            if (checkStatus) {\n              resolve(checkStatus);\n            }\n            resolve({ hasError: false });\n          });\n      });\n    };\n\n    return check(value, data, this) as Promise<CheckResult<E | string, DataType>>;\n  }\n\n  /**\n   * @example\n   * ObjectType().shape({\n   *  name: StringType(),\n   *  age: NumberType()\n   * })\n   */\n  shape(fields: SchemaDeclaration<DataType, E>) {\n    this[schemaSpecKey] = fields;\n    return this;\n  }\n}\n\nexport default function getObjectType<DataType = any, E = string>(errorMessage?: E) {\n  return new ObjectType<DataType, E>(errorMessage);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}